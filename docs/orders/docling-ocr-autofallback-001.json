{
  "order_id": "docling-ocr-autofallback-001",
  "priority": "high",
  "version": "v1.0",
  "supercontext": {
    "repository": "docling_langextract_testing",
    "mission": "Make OCR optional by default but automatically re-run Docling with OCR when digital parsing yields empty output, preserving speed for digital PDFs and accuracy for scans."
  },
  "goal": "Introduce a two-pass Docling extraction: fast pass without OCR, automatic fallback with OCR when the document appears empty. Surface the final status in logs and exports so users know when OCR was applied.",
  "execution_instructions": [
    "Read all tasks before modifying the pipeline.",
    "Honor CLAUDE.md design mantras (start small, ship value, prefer simple patterns).",
    "If Docling integration throws unexpected errors during fallback, stop and escalate rather than masking them."
  ],
  "tasks": [
    {
      "id": "design-fallback-flow",
      "description": "Plan the two-pass extraction and detection heuristics.",
      "steps": [
        "Define lightweight checks that decide when to trigger OCR fallback (e.g., extracted plain_text length < threshold, or all events show 'Processing failed/Date not available').",
        "Decide where timing data is recorded for both passes (if fallback runs, capture separate timings).",
        "Document the decision flow (diagram or docstring) so future contributors understand the sequence.",
        "Add a config toggle (e.g., DOCLING_AUTO_OCR_FALLBACK=true) so the behaviour can be disabled if needed."
      ]
    },
    {
      "id": "implement-two-pass",
      "description": "Modify DoclingDocumentExtractor to support the fast pass + OCR fallback.",
      "steps": [
        "Extend DoclingDocumentExtractor.extract() (or wrapper) to run Docling with current config (OCR possibly false) and inspect the result.",
        "If heuristic detects empty output, rerun Docling with OCR enabled (override DOCLING_DO_OCR=true just for the fallback call).",
        "Ensure metadata records whether fallback ran (e.g., metadata['ocr_fallback_used']=true).",
        "Update timing instrumentation so the OCR fallback path captures a second Docling duration (e.g., docling_seconds_fast, docling_seconds_ocr)."
      ]
    },
    {
      "id": "plumb-timing-and-logging",
      "description": "Update timing and logging to reflect fallback behaviour.",
      "steps": [
        "Adjust legal_pipeline_refactored timing to handle a second Docling invocation (record both passes or the fallback only).",
        "Emit log entries indicating when fallback occurs (e.g., 'Docling OCR fallback triggered for invoice.pdf').",
        "Ensure event records / exports include a flag or metadata column (e.g., OCR_Fallback=Yes/No) so users can see which documents required OCR."
      ]
    },
    {
      "id": "testing",
      "description": "Verify the new behaviour on both digital and scanned PDFs.",
      "steps": [
        "Pick one purely digital PDF (e.g., sample_pdf/amrapali_case/Amrapali Allotment Letter.pdf) and confirm fallback does not trigger.",
        "Pick one scanned PDF (e.g., sample_pdf/famas_dispute/Transaction_Fee_Invoice.pdf) and confirm fallback runs and populates text.",
        "Run the Streamlit app end-to-end: process both docs, inspect logs, and download CSV/JSON to confirm OCR fallback metadata shows up.",
        "Document the before/after timing and date coverage in docs/reports/ (e.g., timing delta, date extraction restored)."
      ]
    }
  ],
  "acceptance_criteria": [
    "Docling runs fast pass without OCR and only triggers OCR when the heuristic indicates missing text.",
    "Timing logs and exports show two Docling durations when fallback occurs, and metadata indicates OCR usage.",
    "Tests/Streamlit runs confirm digital PDFs stay fast, scanned PDFs recover dates.",
    "Documentation (README or reference doc) explains the fallback toggle and behaviour."
  ],
  "constraints": {
    "what_not_to_do": [
      "Do not re-enable OCR globally—fallback must be per-document.",
      "Do not hard-code file-specific hacks; rely on heuristics and config flags.",
      "Do not drop timing instrumentation—ensure fallback integrates cleanly.",
      "Do not skip documentation updates; users must know how to control the fallback."
    ],
    "escalation_guidance": "If Docling's API makes it difficult to toggle OCR at runtime, stop and propose an alternative design instead of introducing unstable hacks."
  }
}
