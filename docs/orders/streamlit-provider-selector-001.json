{
  "order_id": "streamlit-provider-selector-001",
  "priority": "high",
  "supercontext": {
    "repository": "docling_langextract_testing",
    "mission": "Expose multi-provider event extraction controls in the primary Streamlit UI so operators can switch between LangExtract, OpenRouter, and OpenCode Zen without restarting the app."
  },
  "goal": "Add a Streamlit-side provider selector that wires into the pluggable extractor pipeline, updates documentation, and documents the verification steps for the new workflow.",
  "execution_instructions": [
    "Read this order completely before editing any files.",
    "Follow the tasks in sequence; if a step does not apply, leave a note in the work summary explaining why.",
    "Escalate immediately if a referenced file or command is missing, or if credentials are required that you cannot supply.",
    "Do not execute deployment or production-only commands—limit changes to the development environment." 
  ],
  "tasks": [
    {
      "id": "streamlit-provider-ui",
      "description": "Add provider selection controls to app.py so users can choose the active event extractor.",
      "steps": [
        "Load the existing EVENT_EXTRACTOR value (defaulting to 'langextract') and present it via a Streamlit selectbox or radio group labelled 'Event Provider'.",
        "Place the control in the Processing sidebar/column so it is visible before running the pipeline, and persist the choice in st.session_state.",
        "Update any instructional copy in the UI to reflect that multiple providers are available, including a short tooltip describing credential requirements."
      ]
    },
    {
      "id": "pipeline-provider-binding",
      "description": "Ensure the Streamlit selection drives the pluggable pipeline configuration.",
      "steps": [
        "Propagate the selected provider into src/ui/streamlit_common.py so get_pipeline() rebuilds the LegalEventsPipeline whenever the provider changes.",
        "Extend LegalEventsPipeline (src/core/legal_pipeline_refactored.py) and create_default_extractors (src/core/extractor_factory.py) to accept an explicit provider override, falling back to environment defaults when none is provided.",
        "Guard against stale sessions by clearing cached pipeline instances if the provider toggle changes mid-session, and log the active provider for observability."
      ]
    },
    {
      "id": "configuration-updates",
      "description": "Align configuration helpers and environment samples with the interactive selector.",
      "steps": [
        "Update src/core/config.py so load_provider_config() can accept caller-supplied Docling/ExtractorConfig instances and normalises provider keys.",
        "Add any missing provider placeholders to .env.example (OPENROUTER_API_KEY, OPENCODEZEN_API_KEY) with clear comments about keeping secrets local.",
        "Verify no other modules assume EVENT_EXTRACTOR is environment-only; adjust imports or docstrings if needed."
      ]
    },
    {
      "id": "docs-and-guides",
      "description": "Document the new selector and configuration flow.",
      "steps": [
        "Update README.md (Provider Selection section) with a brief note that the Streamlit app exposes an in-app provider toggle.",
        "Add a short walkthrough to docs/guides/provider_integration_guide.md covering how to use the selector and required credentials per provider.",
        "If additional clarifications are needed, reference this order from docs/orders/README or relevant documentation index files."
      ]
    },
    {
      "id": "verification-and-reporting",
      "description": "Validate functionality and capture evidence for traceability.",
      "steps": [
        "Run `uv run python tests/run_all_tests.py --quick` to ensure regression coverage still passes (note any skips due to missing credentials).",
        "Manually start the Streamlit app (`uv run streamlit run app.py`), switch between providers, and confirm the selection updates the processing logs without errors; capture screenshots or console output if possible.",
        "Document test commands and outcomes in docs/reports/ or the final work summary, including reasons for any skipped provider checks." 
      ]
    }
  ],
  "acceptance_criteria": [
    "The Streamlit app exposes a persistent provider selector that defaults to the configured EVENT_EXTRACTOR value and drives the active pipeline.",
    "Switching providers within a session reinitializes the LegalEventsPipeline with the chosen adapter and logs the provider name.",
    "README.md and provider integration guides mention the new selector and the required credentials for each provider.",
    "Test evidence (automated run + manual toggle verification) is recorded or linked from the work summary with skip reasons where applicable."
  ],
  "constraints": {
    "what_not_to_do": [
      "Do not hardcode API keys, models, or provider names directly in the UI logic—continue to rely on configuration and environment variables.",
      "Do not remove or regress existing LangExtract defaults; the selector must remain backward-compatible when no user interaction occurs.",
      "Do not bypass pipeline caching semantics without documenting why; any cache invalidation must be limited to provider changes.",
      "Do not commit screenshots or logs that expose sensitive document content or credentials."
    ],
    "escalation_guidance": "If the selector requires behaviour that conflicts with current session-state caching or if provider SDKs error due to missing credentials, pause work and request clarification before proceeding."
  }
}
