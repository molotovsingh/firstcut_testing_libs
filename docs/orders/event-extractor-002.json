{
  "order_id": "event-extractor-002",
  "priority": "high",
  "supercontext": {
    "repository": "docling_langextract_testing",
    "mission": "Complete multi-provider event extractor support by wiring OpenRouter and OpenCode Zen adapters and documenting their usage."
  },
  "goal": "Close the gaps called out in event-extractor-001 so contributors can choose LangExtract, OpenRouter, or OpenCode Zen via configuration without code edits.",
  "tasks": [
    {
      "id": "openrouter-adapter",
      "description": "Implement OpenRouter configuration + adapter and register it in the event provider registry.",
      "steps": [
        "Add OpenRouterConfig to src/core/config.py with env-var parsing for API key, base URL, model, and timeout.",
        "Create src/core/openrouter_adapter.py that lazy-imports dependencies, validates credentials, and maps responses to EventRecord instances.",
        "Register the factory in EVENT_PROVIDER_REGISTRY and add unit tests that mock HTTP responses, ensuring errors raise ExtractorConfigurationError when credentials are absent."
      ]
    },
    {
      "id": "opencode-zen-adapter",
      "description": "Add the OpenCode Zen provider following the same pattern as OpenRouter.",
      "steps": [
        "Define OpenCodeZenConfig with required env vars (API key, endpoint, model) and graceful defaults.",
        "Implement src/core/opencode_zen_adapter.py with availability checks and fallback EventRecord creation on failures.",
        "Register the adapter in the factory and add pytest coverage mirroring the OpenRouter tests."
      ]
    },
    {
      "id": "docs-env-test-updates",
      "description": "Update documentation, environment examples, and tests to reflect the multi-provider matrix.",
      "steps": [
        "Extend README.md, AGENTS.md, and docs/pluggable_extractors_prd.md with provider setup instructions and mention of the new adapters.",
        "Add OpenRouter and OpenCode Zen placeholders to .env.example (with notes to keep secrets local).",
        "Enhance tests/run_all_tests.py (or equivalent smoke harness) to detect provider credentials and run provider-specific smoke tests, skipping with clear messaging when credentials are missing." 
      ]
    },
    {
      "id": "validation-pass",
      "description": "Run targeted tests and document results so order compliance is auditable.",
      "steps": [
        "Execute unit tests covering registry lookups and the new adapters.",
        "If credentials are available, run at least one smoke test per provider; otherwise capture the skipped output for traceability.",
        "Record the commands and outcomes in docs/reports/ or the work summary so future agents see the verification history."
      ]
    }
  ],
  "acceptance_criteria": [
    "EVENT_EXTRACTOR accepts 'langextract', 'openrouter', or 'opencode_zen' and instantiates the correct adapter without code changes.",
    "Adapters validate required credentials and raise actionable errors when configuration is incomplete.",
    "Documentation lists provider-specific environment variables and references this order for execution guidance.",
    "Test evidence (unit + smoke/skip notes) is captured and linked from the work summary so compliance is verifiable."
  ],
  "constraints": {
    "what_not_to_do": [
      "Do not bypass configuration guardrails by hardcoding API keys or provider choices in code.",
      "Do not remove or weaken existing LangExtract behaviourâ€”new adapters must be additive.",
      "Do not commit real credentials or sensitive endpoints; rely on environment variables and local secrets management."
    ],
    "escalation_guidance": "If provider SDKs require unsupported system packages or network calls, pause and request guidance before proceeding."
  }
}
