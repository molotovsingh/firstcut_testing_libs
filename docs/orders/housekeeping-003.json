{
  "order_id": "housekeeping-003",
  "priority": "high",
  "version": "v1.0",
  "supercontext": {
    "repository": "docling_langextract_testing",
    "mission": "Normalize the git worktree by regrouping sample PDFs, staging recent documentation/code changes, and ensuring design guardrails are referenced before the next PR."
  },
  "goal": "Consolidate the amrapali sample PDFs, stage intentional edits (orders, plans, timing instrumentation), remove accidental artifacts, and confirm the working tree is clean and ready for review.",
  "execution_instructions": [
    "Read every task before running commands.",
    "Follow the design mantras in CLAUDE.md (start small, ship value, prefer simple patterns) while planning any movements.",
    "If a git command fails or you see unexpected modified files, stop and escalate instead of forcing it."
  ],
  "tasks": [
    {
      "id": "organize-sample-pdfs",
      "description": "Express the intended Amrapali document move so git tracks history cleanly.",
      "steps": [
        "Run `git mv "sample_pdf/*.pdf" sample_pdf/amrapali_case/` to move the individual PDFs into the new folder (one command per file if necessary).",
        "Verify with `git status` that the old paths disappear and the new directory is staged as renames rather than deletes/adds.",
        "Confirm the directory structure lists exactly the expected nine Amrapali files in `sample_pdf/amrapali_case/`."
      ]
    },
    {
      "id": "stage-intentional-edits",
      "description": "Add all intended documentation and code changes to the index.",
      "steps": [
        "Stage updated docs/orders: example-order-template, performance-timing-001, and the new revision note under docs/plans.",
        "Stage plan updates (`docs/plans/parser-extractor-matrix-research-plan.md`).",
        "Stage timing instrumentation files: `src/core/constants.py`, `legal_pipeline_refactored.py`, `table_formatter.py`, `interfaces.py`, and `scripts/validate_timing.py`.",
        "Run `git diff --cached` to review staged changes before continuing."
      ]
    },
    {
      "id": "clean-artifacts",
      "description": "Remove or ignore unintended files.",
      "steps": [
        "Delete any accidental files such as `.env.backup` or npm cache entries (`.npm-cache/...`).",
        "If those caches are needed locally, add appropriate `.gitignore` entries instead of committing them.",
        "Confirm `git status` shows no remaining untracked artifacts aside from intentionally staged files."
      ]
    },
    {
      "id": "final-verification",
      "description": "Ensure the tree is clean and document the state.",
      "steps": [
        "Run `git status -sb` to confirm only the staged files remain and there are no unexpected modifications.",
        "Capture a summary of staged files (e.g., `git diff --stat --cached`) for inclusion in the work summary.",
        "Document the outcome in the final response (tree clean, staging ready, remaining actions if any)."
      ]
    }
  ],
  "acceptance_criteria": [
    "All Amrapali sample PDFs are tracked under `sample_pdf/amrapali_case/` via git mv (no lingering deletes).",
    "Documentation and timing instrumentation files are staged for commit, with diffs reviewed.",
    "No stray artifacts (env backups, caches) remain untracked or staged.",
    "`git status` reports a clean working tree aside from the intentional staged changes."
  ],
  "constraints": {
    "what_not_to_do": [
      "Do not force-add large artifacts or caches.",
      "Do not commit `.env` or backup secrets.",
      "Do not squash unrelated changes togetherâ€”keep staging focused on the listed files.",
      "Do not push until staged diff has been reviewed locally."
    ],
    "escalation_guidance": "If any file still appears deleted instead of moved after git mv, or staging fails due to index lock, stop and request assistance before proceeding."
  }
}
