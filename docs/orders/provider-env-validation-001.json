{
  "order_id": "provider-env-validation-001",
  "priority": "high",
  "supercontext": {
    "repository": "docling_langextract_testing",
    "mission": "Align provider-specific credential validation with the new Streamlit selector so each adapter checks the correct API key before pipeline initialization."
  },
  "goal": "Refactor environment validation to respect the selected provider, surface actionable guidance in the UI, and document the updated credential requirements for LangExtract, OpenRouter, and OpenCode Zen.",
  "execution_instructions": [
    "Read this entire order before editing files.",
    "Complete the tasks in sequence; if a step does not apply, note it in the work summary along with the reason.",
    "Coordinate with the owners of streamlit-provider-selector-001 and streamlit-provider-reliability-001 so fixes land in a consistent branch.",
    "Do not log or commit real API keys, secrets, or document contents while testing."
  ],
  "tasks": [
    {
      "id": "audit-current-validation",
      "description": "Confirm the existing credential checks and document failure modes.",
      "steps": [
        "Review src/core/legal_pipeline_refactored.py to understand how _validate_environment currently enforces GEMINI_API_KEY.",
        "Trace LegalEventsPipeline initialization via src/ui/streamlit_common.get_pipeline to see how provider overrides are passed in.",
        "Capture logs or stack traces showing the failure when switching to OpenRouter or OpenCode Zen without GEMINI_API_KEY, and store them in docs/reports/ for reference.",
        "List all required environment variables per provider (LangExtract, OpenRouter, OpenCode Zen) before modifying code." 
      ]
    },
    {
      "id": "implement-provider-aware-checks",
      "description": "Update pipeline and helpers to validate the correct credentials per provider.",
      "steps": [
        "Introduce a mapping from provider â†’ required environment variables inside LegalEventsPipeline (or a dedicated helper) so _validate_environment enforces the appropriate key(s).",
        "Ensure the default case still validates GEMINI_API_KEY for LangExtract but does not require it when OpenRouter or OpenCode Zen is selected.",
        "Adjust src/ui/streamlit_common.get_pipeline and related UI messaging to surface the provider-specific requirement using the same mapping, avoiding hard-coded strings.",
        "Verify extractor_factory.create_default_extractors receives the selected provider and does not regress existing configuration behaviour." 
      ]
    },
    {
      "id": "documentation-updates",
      "description": "Document the new validation behaviour and credential prerequisites.",
      "steps": [
        "Update README.md Provider Selection section to state that the app now checks provider-specific API keys and describe the expected environment variables.",
        "Add a troubleshooting note to docs/guides/provider_integration_guide.md explaining the error messages shown when keys are missing for each provider.",
        "Ensure .env.example lists placeholders for all required keys with comments about keeping secrets out of version control." 
      ]
    },
    {
      "id": "verification",
      "description": "Prove the validation behaves correctly across providers.",
      "steps": [
        "Run `uv run python tests/run_all_tests.py --quick` after the changes; record results and any skips in docs/reports/provider-env-validation-001.md (create if needed).",
        "Manually launch `uv run streamlit run app.py`, toggle each provider, and confirm the app blocks processing only when the corresponding API key is missing; capture sanitized console/UI output as evidence.",
        "If certain provider keys are unavailable, document the limitation and provide unit tests or mocks demonstrating the validation logic instead." 
      ]
    }
  ],
  "acceptance_criteria": [
    "LegalEventsPipeline no longer requires GEMINI_API_KEY when OpenRouter or OpenCode Zen is selected; each provider checks its own credential.",
    "Streamlit displays provider-specific guidance when credentials are missing, without exposing secret values.",
    "README.md and provider integration guides reflect the updated validation flow and required environment variables.",
    "Automated tests pass (or skips are justified) and manual verification evidence confirms the UI and pipeline behave correctly for every provider toggle." 
  ],
  "constraints": {
    "what_not_to_do": [
      "Do not weaken security by defaulting to anonymous calls when an API key is missing.",
      "Do not hardcode provider secrets or leak them via logs or screenshots.",
      "Do not regress existing LangExtract behaviour or remove the fallback safeguards in the pipeline.",
      "Do not modify unrelated modules unless required for provider-aware validation." 
    ],
    "escalation_guidance": "If a provider requires additional credentials or permissions beyond environment variables (e.g., account-level approvals), pause and seek guidance before proceeding." 
  }
}
