{
  "order_id": "provider-config-externalization-001",
  "priority": "high",
  "supercontext": {
    "repository": "docling_langextract_testing",
    "mission": "Separate provider configuration defaults from secret storage so operators can swap models/endpoints without touching `.env`."
  },
  "goal": "Move non-secret provider settings (model slugs, base URLs, timeouts) into tracked configuration files while keeping API keys in environment variables, update loaders accordingly, and document the new workflow.",
  "execution_instructions": [
    "Review this order fully before editing any files.",
    "Follow tasks in sequence; if a step is inapplicable, note the reason in the work summary before proceeding.",
    "Coordinate with maintainers of existing provider orders (streamlit-provider-selector-001, provider-env-validation-001) so changes land together.",
    "Do not commit real API keys or sensitive data while migrating configuration." 
  ],
  "tasks": [
    {
      "id": "design-config-layout",
      "description": "Design the new configuration layout that stores non-secret provider defaults outside `.env`.",
      "steps": [
        "Survey current usage in src/core/config.py to catalog which values are secret (API keys) versus non-secret (models, base URLs, timeouts).",
        "Propose a file structure under `config/providers/` (or similar) that holds JSON/TOML/YAML defaults per provider (langextract, openrouter, opencode_zen) with clear naming.",
        "Decide how environment variables override file-based defaults (e.g., env var wins, otherwise fall back to file), and document the precedence in the order notes before implementation.",
        "Get sign-off (work summary note or issue comment) on the chosen structure before modifying code." 
      ]
    },
    {
      "id": "implement-loader-refactor",
      "description": "Refactor configuration loaders to read tracked provider defaults and override with environment variables for secrets only.",
      "steps": [
        "Introduce loader utilities (e.g., `src/core/provider_config_loader.py`) that read provider config files and merge them with `.env` overrides.",
        "Update `DoclingConfig`, `LangExtractConfig`, `OpenRouterConfig`, and `OpenCodeZenConfig` so non-secret fields come from the new files, while API keys still come from env vars at instantiation time.",
        "Ensure backwards compatibility: if config files are missing, fall back to existing environment-based defaults with a warning.",
        "Adjust the Streamlit UI or CLI messaging if they reference configuration values that have moved." 
      ]
    },
    {
      "id": "migrate-sample-configs",
      "description": "Create the tracked provider config files and update `.env.example` to hold secrets only.",
      "steps": [
        "Add default config files (e.g., `config/providers/langextract.json`, `.../openrouter.json`, `.../opencode_zen.json`) containing non-secret settings currently in `.env.example`.",
        "Strip non-secret entries from `.env.example`, leaving only API key placeholders with explanatory comments.",
        "Provide guidance in comments/docstrings about how to override the tracked defaults (e.g., copy the config file locally or set env vars)."
      ]
    },
    {
      "id": "documentation-updates",
      "description": "Document the new configuration hygiene pattern.",
      "steps": [
        "Update README.md Provider Selection and Configuration sections to explain where model/base URL defaults now live and how to override them.",
        "Add instructions to `docs/guides/provider_integration_guide.md` describing the precedence (tracked config â†’ environment override) and how to create environment-specific overrides without editing `.env`.",
        "Create or update `docs/reference/configuration.md` with a table mapping each provider field to its source (config file vs environment variable)."
      ]
    },
    {
      "id": "verification",
      "description": "Validate that the refactor keeps providers functional and secrets isolated.",
      "steps": [
        "Run `uv run python tests/run_all_tests.py --quick` to ensure regression coverage passes; record results (including skips) in `docs/reports/provider-config-externalization-001.md` or similar.",
        "Launch the Streamlit app and confirm that switching between providers uses the new config defaults without modifying `.env`; note any manual overrides tested.",
        "If available, run `scripts/probe_opencode_zen.py` and equivalent OpenRouter checks to prove the config files supply correct defaults; otherwise, document skipped steps with rationale."
      ]
    }
  ],
  "acceptance_criteria": [
    "Provider-specific non-secret settings reside in tracked configuration files, while API keys remain in environment variables.",
    "Configuration loaders honor the precedence: secret from env, non-secret from config file, with env overrides when set.",
    "README and provider integration guides explain the new pattern so contributors know where to update defaults versus secrets.",
    "Automated tests pass (or skips justified) and manual verification confirms the Streamlit selector works without editing `.env` for non-secret tweaks."
  ],
  "constraints": {
    "what_not_to_do": [
      "Do not check real API keys or tenant-specific endpoints into version control.",
      "Do not break existing provider adapters; ensure defaults remain valid if config files are missing or malformed.",
      "Do not introduce multiple competing config sources without a clearly documented precedence order.",
      "Do not modify unrelated security or telemetry settings while performing this refactor." 
    ],
    "escalation_guidance": "If the config refactor conflicts with existing orders or introduces circular dependencies in initialization, pause and request clarification before proceeding." 
  }
}
