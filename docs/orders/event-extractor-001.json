{
  "order_id": "event-extractor-001",
  "priority": "high",
  "context": {
    "repository": "docling_langextract_testing",
    "goal": "Enable configurable event extractor providers (LangExtract, OpenRouter, OpenCode Zen) without regressing the current pipeline.",
    "current_state": [
      "Event extractor selection is hardcoded to LangExtract in src/core/extractor_factory.py.",
      "ExtractorConfig does not expose provider-specific settings for OpenRouter or OpenCode Zen.",
      "Docs reference pluggable extractors but lack incremental execution guidance for contributors."
    ]
  },
  "tasks": [
    {
      "id": "registry-bootstrap",
      "description": "Introduce the event extractor registry while keeping LangExtract as the default provider.",
      "steps": [
        "Refactor src/core/extractor_factory.py to define EVENT_PROVIDER_REGISTRY with an entry for LangExtract and update build_extractors to look up providers.",
        "Create a lightweight ExtractorConfigurationError (or reuse ValueError) with actionable messaging when a provider key is unknown.",
        "Add unit coverage that verifies LangExtract is still instantiated when EVENT_EXTRACTOR is unset or set to 'langextract'."
      ]
    },
    {
      "id": "openrouter-config-adapter",
      "description": "Add OpenRouter support with minimal viable adapter and configuration plumbing.",
      "steps": [
        "Extend src/core/config.py with OpenRouterConfig (API key, base URL, model, timeout) and update load_config to surface it only when selected.",
        "Implement src/core/openrouter_adapter.py that lazy-imports HTTP dependencies, validates credentials, and maps responses to EventRecord.",
        "Register the adapter in EVENT_PROVIDER_REGISTRY and add targeted tests that mock the HTTP layer to confirm normalization logic."
      ]
    },
    {
      "id": "opencodezen-config-adapter",
      "description": "Repeat the adapter pattern for OpenCode Zen with guarded availability checks.",
      "steps": [
        "Define OpenCodeZenConfig alongside environment variable expectations (API key, endpoint, model).",
        "Implement src/core/opencode_zen_adapter.py with graceful degradation when credentials are missing (return fallback record).",
        "Register the provider and add adapter tests mirroring the OpenRouter coverage." 
      ]
    },
    {
      "id": "docs-testing-updates",
      "description": "Document the provider matrix and expand the smoke test harness to cover new options.",
      "steps": [
        "Update README.md, AGENTS.md, and docs/pluggable_extractors_prd.md with configuration instructions and phased rollout notes.",
        "Add new environment variable placeholders to .env.example for OpenRouter and OpenCode Zen.",
        "Teach tests/run_all_tests.py to detect available provider credentials and run provider-specific smoke tests (skip gracefully otherwise)."
      ]
    }
  ],
  "acceptance_criteria": [
    "Setting EVENT_EXTRACTOR to langextract, openrouter, or opencode_zen instantiates the corresponding adapter via the registry.",
    "Each adapter validates required credentials and emits clear errors when configuration is incomplete.",
    "Documentation lists provider-specific environment variables and references this order for execution guidance.",
    "Smoke tests can invoke all registered providers when credentials are present, and the suite reports skips when they are not."
  ],
  "notes": "Work through the tasks sequentially to keep risk low: ship the registry refactor independently before wiring new providers, then add adapters one at a time with focused tests."
}
