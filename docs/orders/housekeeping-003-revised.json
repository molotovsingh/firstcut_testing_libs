{
  "order_id": "housekeeping-003-revised",
  "priority": "high",
  "version": "v1.1",
  "supercontext": {
    "repository": "docling_langextract_testing",
    "mission": "Normalize the git worktree by regrouping sample PDFs, staging recent documentation/code changes, and ensuring design guardrails are referenced before the next PR.",
    "context": "This is a REVISED order fixing issues in housekeeping-003.json. The original order referenced files that were already committed (timing instrumentation) and used git mv on deleted files (technically impossible). This revision matches the actual current git state."
  },
  "goal": "Consolidate the amrapali sample PDFs into proper directory structure, stage intentional edits (orders, plans, code improvements), remove accidental artifacts, and confirm the working tree is clean and ready for review.",
  "execution_instructions": [
    "Read every task before running commands.",
    "Follow the design mantras in CLAUDE.md (start small, ship value, prefer simple patterns) while planning any movements.",
    "If a git command fails or you see unexpected modified files, stop and escalate instead of forcing it.",
    "This order accounts for the fact that performance timing was already committed in a3b4c26 - don't try to stage those files again."
  ],
  "tasks": [
    {
      "id": "organize-sample-pdfs",
      "description": "Stage PDF deletions and new directory so git auto-detects renames (cannot use git mv on already-deleted files).",
      "steps": [
        "Stage all deletions from sample_pdf/ root: `git add -u sample_pdf/`",
        "Stage the new directory: `git add sample_pdf/amrapali_case/`",
        "Verify with `git status` that git shows rename indicators (R) instead of separate deletes/adds.",
        "Run `git diff --cached --stat` to confirm 9 renames detected."
      ],
      "rationale": "Files were moved via filesystem (not git mv), so git sees them as deleted + untracked. Staging both deletions and additions allows git's rename detection to infer the move."
    },
    {
      "id": "stage-documentation-updates",
      "description": "Add intentional documentation improvements to the index.",
      "steps": [
        "Stage order template v1.1 improvements: `git add docs/orders/example-order-template.json`",
        "Stage research plan revision notes: `git add docs/plans/parser-extractor-matrix-research-plan.md`",
        "Stage comprehensive revision documentation: `git add docs/plans/REVISION-2025-10-02.md`",
        "Stage original performance timing order for historical reference: `git add docs/orders/performance-timing-001.json`",
        "Stage original housekeeping order for reference: `git add docs/orders/housekeeping-003.json`",
        "Run `git diff --cached docs/orders/ docs/plans/` to review documentation changes."
      ],
      "notes": "Performance timing instrumentation (interfaces.py, legal_pipeline_refactored.py, etc.) was already committed in a3b4c26, so not included here."
    },
    {
      "id": "stage-code-improvements",
      "description": "Stage the citation prompt improvement in constants.py.",
      "steps": [
        "Review the change: `git diff src/core/constants.py` (should show improved citation field description)",
        "Stage the improvement: `git add src/core/constants.py`",
        "Verify: `git diff --cached src/core/constants.py` shows the citation prompt clarification (verbatim reference requirement)"
      ]
    },
    {
      "id": "clean-artifacts",
      "description": "Remove or ignore unintended files.",
      "steps": [
        "Delete environment backup: `rm .env.backup`",
        "Delete npm cache artifacts: `rm -rf .npm-cache/_cacache/content-v2/`",
        "Add npm cache to .gitignore: `echo '.npm-cache/' >> .gitignore`",
        "Stage .gitignore update: `git add .gitignore`",
        "Stage npm cache deletions: `git add -u .npm-cache/`",
        "Confirm `git status` shows no remaining untracked artifacts aside from intentionally excluded files."
      ]
    },
    {
      "id": "final-verification",
      "description": "Ensure the tree is clean and document the state.",
      "steps": [
        "Run `git status -sb` to confirm only the staged files remain and there are no unexpected modifications.",
        "Run `git diff --stat --cached` to get summary of all staged changes.",
        "Verify staging breakdown: 9 PDF renames, 5 documentation files added/modified, 1 code improvement, npm cache cleanup, .gitignore update.",
        "Document the outcome in the final response (tree clean, staging ready, remaining actions if any)."
      ]
    },
    {
      "id": "commit-preparation",
      "description": "Prepare commit message draft for review.",
      "steps": [
        "Draft commit message following repository conventions (see recent git log).",
        "Message should mention: PDF reorganization (9 renames), documentation updates (order template v1.1, research plan revision, REVISION-2025-10-02 added), code improvement (citation prompt clarity), npm cache cleanup.",
        "Include standard footer: 'ðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\\n\\nCo-Authored-By: Claude <noreply@anthropic.com>'",
        "Present draft to user for approval before committing."
      ]
    }
  ],
  "acceptance_criteria": [
    "All Amrapali sample PDFs show as renames (R) in git status, not deletes + adds.",
    "Documentation files staged: example-order-template.json, parser-extractor-matrix-research-plan.md, REVISION-2025-10-02.md, performance-timing-001.json, housekeeping-003.json.",
    "Code improvement staged: src/core/constants.py (citation prompt clarification).",
    "No stray artifacts (.env.backup, npm cache content) remain untracked.",
    "npm cache added to .gitignore and cache deletions staged.",
    "`git status` shows clean working tree except for intentional staged changes.",
    "Commit message drafted and ready for user approval."
  ],
  "constraints": {
    "what_not_to_do": [
      "Do not use git mv on files that git shows as deleted (technically impossible).",
      "Do not force-add large artifacts or caches.",
      "Do not commit .env or backup secrets.",
      "Do not squash unrelated changes togetherâ€”keep staging focused on the listed files.",
      "Do not push until commit message has been reviewed and approved.",
      "Do not stage files that were already committed in a3b4c26 (timing instrumentation)."
    ],
    "escalation_guidance": "If git doesn't auto-detect renames after staging (no R indicators), or if staging fails due to index lock, stop and request assistance before proceeding."
  },
  "fixes_from_original": [
    "Task 1: Changed from impossible `git mv` on deleted files to correct `git add -u` + `git add` approach for rename detection.",
    "Task 2: Updated file list to match current git state (timing files already committed, added missing untracked docs).",
    "Task 2: Added explicit decisions about performance-timing-001.json (keep for history) and REVISION-2025-10-02.md (comprehensive revision notes).",
    "Task 2: Added housekeeping-003.json to staging (keep original order for reference).",
    "Task 4: Added npm cache cleanup steps (deletions + .gitignore update).",
    "Added Task 6 for commit message preparation and user approval step.",
    "Added 'context' field to supercontext explaining why this revision was necessary.",
    "Added version bump to v1.1 and 'fixes_from_original' section for transparency."
  ]
}
