{
  "order_id": "api-connection-test",
  "priority": "high",
  "supercontext": {
    "repository": "docling_langextract_testing",
    "mission": "Verify API credentials and endpoint reachability for configured event extractors before running deeper pipelines."
  },
  "goal": "Run explicit connectivity checks for LangExtract, OpenRouter, and OpenCode Zen (when selected) and capture the outcomes for audit.",
  "execution_instructions": [
    "Ensure `.env` is populated with the provider credentials you intend to test before starting.",
    "Perform checks in the order listed. Stop and escalate if any test fails unexpectedly or cannot be executed due to sandbox limits.",
    "Record each provider's result (pass/fail/skip with reason) in the work summary and docs/reports/ if artifacts are produced."
  ],
  "tasks": [
    {
      "id": "langextract-health",
      "description": "Confirm LangExtract/Gemini credentials are valid.",
      "steps": [
        "Use the existing LangExtract client smoke (e.g., `uv run python scripts/check_langextract.py`) or run a minimal extraction via `LangExtractClient.is_available()`.",
        "If sandbox blocks the call, log the failure message and mark the test as skipped with explanation.",
        "Capture any stdout/stderr or JSON response snippet in docs/reports/langextract_connection.log (create directory if missing)."
      ]
    },
    {
      "id": "openrouter-health",
      "description": "Ping the OpenRouter API when EVENT_EXTRACTOR is set to openrouter.",
      "steps": [
        "Set `EVENT_EXTRACTOR=openrouter` in the environment (temporarily) and ensure `OPENROUTER_API_KEY`/`OPENROUTER_MODEL` are filled.",
        "Run `uv run python scripts/check_openrouter.py` (or equivalent) that issues a lightweight completion/test request; if the script does not exist, note and create a placeholder log explaining the gap.",
        "If network access is restricted, mock the HTTP call using `tests/test_openrouter_adapter.py` and document the skipped real call."
      ]
    },
    {
      "id": "opencodezen-health",
      "description": "Ping the OpenCode Zen API when EVENT_EXTRACTOR=opencode_zen.",
      "steps": [
        "Set `EVENT_EXTRACTOR=opencode_zen` and verify `OPENCODEZEN_API_KEY`/`OPENCODEZEN_MODEL` are present.",
        "Execute `uv run python scripts/check_opencode_zen.py` or an equivalent smoke routine (mock if real calls are disallowed).",
        "Log the outcome to docs/reports/opencode_zen_connection.log including skip reasons if applicable."
      ]
    }
  ],
  "acceptance_criteria": [
    "Connectivity (or a documented skip) has been attempted for each configured provider.",
    "Logs or summaries of the results live under docs/reports/ or in the final work summary for traceability.",
    "Any failures include next-step guidance (e.g., credentials missing, sandbox blocked)."
  ],
  "constraints": {
    "what_not_to_do": [
      "Do not hardcode credentials inside scripts; rely on environment variables only.",
      "Do not ignore failed checksâ€”always capture error messages and escalate if unsure.",
      "Do not modify pipeline code as part of this order; keep it focused on connectivity validation."
    ],
    "escalation_guidance": "If real network calls are impossible due to policy, document the limitation and request approval for alternative test methods."
  }
}
