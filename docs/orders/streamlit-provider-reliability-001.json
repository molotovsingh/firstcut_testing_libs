{
  "order_id": "streamlit-provider-reliability-001",
  "priority": "critical",
  "supercontext": {
    "repository": "docling_langextract_testing",
    "mission": "Debug and restore OpenRouter and OpenCode Zen support in the Streamlit workflow so all registered providers operate end-to-end, not just LangExtract."
  },
  "goal": "Identify why non-LangExtract providers fail in the Streamlit app, implement the necessary pipeline/UI fixes, and capture evidence that all supported providers run successfully when credentials are present.",
  "execution_instructions": [
    "Read this order fully before touching the codebase.",
    "Execute the tasks sequentially. If a step cannot be completed, document the reason in the work summary and escalate before proceeding.",
    "Coordinate with the owner of streamlit-provider-selector-001 if the provider toggle work has not landed yet; this order assumes that selector is available.",
    "Do not commit or print real API keys, document contents, or other sensitive data while debugging."
  ],
  "tasks": [
    {
      "id": "reproduce-provider-failure",
      "description": "Confirm the reported issue and gather diagnostic data for OpenRouter and OpenCode Zen failures.",
      "steps": [
        "Run `uv run streamlit run app.py`, switch the in-app provider selector to `openrouter`, and attempt to process a sample document.",
        "Capture Streamlit logs and backend tracebacks (including any warnings emitted from LegalEventsPipeline) and save key findings to docs/reports/ with timestamps.",
        "Repeat the process for `opencode_zen`; note whether failures differ between providers.",
        "List any missing environment variables or credentials that block execution so reviewers can differentiate auth errors from code bugs."
      ]
    },
    {
      "id": "pipeline-diagnostics",
      "description": "Audit pipeline initialization and cache handling to ensure provider overrides propagate correctly.",
      "steps": [
        "Inspect src/ui/streamlit_common.py and verify that changing the provider clears cached pipeline instances before calling LegalEventsPipeline.",
        "Instrument (temporarily) or review logging in src/core/legal_pipeline_refactored.py to confirm create_default_extractors receives the expected provider.",
        "Check src/core/extractor_factory.py and src/core/config.py for assumptions that EVENT_EXTRACTOR comes only from environment variables; document any code paths that ignore UI overrides.",
        "Outline required changes (if any) before editing files so the reviewer signs off on the approach."
      ]
    },
    {
      "id": "implement-fixes",
      "description": "Apply code fixes so OpenRouter and OpenCode Zen run through the Streamlit pipeline without manual restarts.",
      "steps": [
        "Update LegalEventsPipeline and extractor factory/config helpers so provider overrides from the UI instantiate the correct adapters on demand.",
        "Ensure session state invalidation only occurs when the provider actually changes to avoid unnecessary re-processing.",
        "Improve user-facing error messages in app.py: when a provider raises configuration errors, surface actionable guidance (e.g., missing API key).",
        "Remove any temporary instrumentation added during diagnostics once the fix is verified."
      ]
    },
    {
      "id": "documentation-updates",
      "description": "Document the troubleshooting steps and credential requirements uncovered while fixing the issue.",
      "steps": [
        "Update README.md Provider Selection section with a reminder that OpenRouter/OpenCode Zen require valid API keys before toggling in the UI.",
        "Add a troubleshooting entry to docs/guides/provider_integration_guide.md describing symptoms and fixes for provider mismatches or cache issues.",
        "If new configuration variables were introduced, reflect them in .env.example with placeholder text and warnings about secret management."
      ]
    },
    {
      "id": "verification",
      "description": "Run automated tests and manual checks to prove the fixes work across providers.",
      "steps": [
        "Execute `uv run python tests/run_all_tests.py --quick`; capture output (including skipped tests) and store in docs/reports/streamlit-provider-reliability-001.md or similar.",
        "With valid credentials, process at least one sample document per provider inside the Streamlit app. If credentials are unavailable, document the block and provide mocked/unit coverage instead.",
        "Record final test outcomes and provider toggle screenshots or console logs in the work summary, redacting any sensitive content."
      ]
    }
  ],
  "acceptance_criteria": [
    "Switching the Streamlit provider to OpenRouter or OpenCode Zen initializes the correct adapter without restarting the app.",
    "User-facing errors clearly identify missing or invalid credentials instead of generic failures.",
    "Automated smoke tests run cleanly (or skips are justified) and manual verification steps confirm each provider processes a document end-to-end when credentials are supplied.",
    "Documentation mentions the fix, credential prerequisites, and provides troubleshooting guidance for future incidents."
  ],
  "constraints": {
    "what_not_to_do": [
      "Do not remove LangExtract support or change its default behaviour while fixing other providers.",
      "Do not hardcode API keys, endpoints, or provider names inside the UI or pipeline; continue using configuration objects.",
      "Do not leave temporary logging or debug code in production modules after validation is complete.",
      "Do not commit sensitive documents, screenshots, or logs containing client data." 
    ],
    "escalation_guidance": "If third-party APIs rate-limit or reject requests during testing, pause and coordinate with the project lead before retrying to avoid account lockouts." 
  }
}
